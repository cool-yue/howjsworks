/**
 * How Big Integers Works
 */

 // 一个对JavaScript常见的抱怨是它没有64bit的整形数
 // int64 能够把持准确大到9223372036854775807的整数
 // 这个比你能从js中通过Number.MAX_SAFE_INTEGER(2**53 -1)多3位数

 // 我们应该在搞一个新的number类型放进JavaScript这个想法也是有问题的
 // 这个看起来一点都不是问题
 // 其他语言有多个类型的number类型
 // 为什么javascript不能够更像其他的语言呢?

 // 当你有一个只有一个number类型的语言,添加另外一个就是一种暴力的行为
 // 它会存在很大程度的简洁性缺失和一个大的新的bug形成的潜在风险
 // 每一个类型的申明(比如申明错了,位数不够)和每一个类型的转化(转化损失经度)就是一个潜在的错误出现的地方

 // 同样还有一个问题,64bit够用吗?可能我们应该看着72bit,或者96bit,或者128bit,或者256bit.
 // 无论你选择什么数,都会有一个好的争论说数字应该更大

 // 我认为把big integers加入到语言中是个错误,它应该是一个库
 // 大多数语言的使用者不需要他们,他们也没有解决当前数字面临的最大的问题
 // 带着一点点编程,没有必要损坏语言
 // 我们可以在任意bit做准确的整数运算并且按照javaScript分配bit的形式来做
 // 有很多方法都可以做这个,我这里的实现,并没有为速度和体积进行优化
 // 但是取而代之,为说明性做了很好的优化
 // 我想呈现一个完整的库,而不要搞太多的页来表示它